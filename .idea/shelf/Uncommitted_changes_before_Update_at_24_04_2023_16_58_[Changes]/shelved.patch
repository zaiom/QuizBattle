Index: app/src/main/java/com/example/quizbattle/QuestionActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.quizbattle\r\n\r\nimport android.content.res.ColorStateList\r\nimport android.graphics.Color\r\nimport android.graphics.Typeface\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.view.View.OnClickListener\r\nimport android.widget.Button\r\nimport android.widget.TextView\r\nimport android.widget.Toast\r\nimport androidx.core.content.ContextCompat\r\nimport com.example.quizbattle.databinding.ActivityQuestionBinding\r\nimport android.os.Handler\r\n\r\n\r\nclass QuestionActivity : AppCompatActivity(), OnClickListener{\r\n\r\n    private var mCurrentPosition: Int = 1                           // number of a question\r\n    private var mQuestionsList: ArrayList<Question>? = null\r\n    private var mSelectedOptionPosition: Int = 0                    // selected answer button\r\n    private var mCorrectAnswers: Int = 0\r\n\r\n    private lateinit var binding: ActivityQuestionBinding\r\n\r\n\r\n\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivityQuestionBinding.inflate(layoutInflater)\r\n        //setContentView(R.layout.activity_question)\r\n        setContentView(binding.root)\r\n\r\n        //window.decorView.systemUiVisibility = View.SYSTEM_UI_FLAG_FULLSCREEN\r\n\r\n        mQuestionsList = Constants.getQuestions()\r\n\r\n        setQuestion()\r\n\r\n        binding.answer1Button.setOnClickListener(this)\r\n        binding.answer2Button.setOnClickListener(this)\r\n        binding.answer3Button.setOnClickListener(this)\r\n        binding.answer4Button.setOnClickListener(this)\r\n\r\n\r\n    }\r\n\r\n    // sets question text, image, and button's text for the next question\r\n    private fun setQuestion(){\r\n\r\n        val question = mQuestionsList!![mCurrentPosition-1]\r\n\r\n        defaultOptionView()\r\n\r\n        binding.progressBar.progress = mCurrentPosition\r\n        binding.progressText.text = \"$mCurrentPosition\" + \"/\" + binding.progressBar.max\r\n\r\n        binding.questionText.text = question!!.question\r\n        binding.questionImage.setImageResource(question.image)\r\n\r\n\r\n        binding.answer1Button.text = question.optionOne\r\n        binding.answer2Button.text = question.optionTwo\r\n        binding.answer3Button.text = question.optionThree\r\n        binding.answer4Button.text = question.optionFour\r\n\r\n    }\r\n\r\n    // asigning right background to our option ( button )\r\n    private fun answerView(answer: Int, drawableView: Int){\r\n        when (answer){\r\n            1 -> {\r\n                binding.answer1Button.background = ContextCompat.getDrawable(this, drawableView)\r\n            }\r\n\r\n            2 -> {\r\n                binding.answer2Button.background = ContextCompat.getDrawable(this, drawableView)\r\n            }\r\n\r\n            3 -> {\r\n                binding.answer3Button.background = ContextCompat.getDrawable(this, drawableView)\r\n            }\r\n\r\n            4 -> {\r\n                binding.answer4Button.background = ContextCompat.getDrawable(this, drawableView)\r\n            }\r\n        }\r\n    }\r\n\r\n    //sets apperance of the buttons after setting new question\r\n    private fun defaultOptionView(){\r\n\r\n        val options = ArrayList<Button>()\r\n        options.add(0, binding.answer1Button)\r\n        options.add(1, binding.answer2Button)\r\n        options.add(2, binding.answer3Button)\r\n        options.add(3, binding.answer4Button)\r\n\r\n        for (option in options){\r\n            option.setBackgroundColor(Color.parseColor(\"#000000\"))\r\n            //option.background = ContextCompat.getDrawable(this, R.drawable.default_option_border_bg)\r\n            //option.typeface = Typeface.DEFAULT                                  // sets the typeface and style in which the text should be displayed\r\n\r\n        }\r\n    }\r\n    override fun onClick(v: View?) {\r\n\r\n        when (v?.id){\r\n            // ??? czy to git?\r\n            R.id.answer1Button -> {\r\n                selectedOptionView(binding.answer1Button, 1)\r\n                checkAnswer()\r\n            }\r\n\r\n            R.id.answer2Button -> {\r\n                selectedOptionView(binding.answer2Button, 2)\r\n                checkAnswer()\r\n            }\r\n\r\n            R.id.answer3Button -> {\r\n                selectedOptionView(binding.answer2Button, 3)\r\n                checkAnswer()\r\n            }\r\n\r\n            R.id.answer4Button -> {\r\n                selectedOptionView(binding.answer2Button, 4)\r\n                checkAnswer()\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private fun checkAnswer(){\r\n\r\n        if (mSelectedOptionPosition == 0)\r\n        {\r\n            mCurrentPosition ++\r\n\r\n            when\r\n            {\r\n                mCurrentPosition <= mQuestionsList!!.size ->\r\n                {\r\n                    setQuestion()\r\n                }\r\n                else -> {\r\n                Toast.makeText(this, \"You have successfully completed the Quiz\", Toast.LENGTH_SHORT).show()\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            val question = mQuestionsList?.get(mCurrentPosition - 1)\r\n\r\n            if (question!!.correctAnswer != mSelectedOptionPosition)\r\n            {\r\n                answerView(mSelectedOptionPosition, R.drawable.wrong_option_button_border_bg)\r\n                //answerView(mSelectedOptionPosition, button1.setBackgroundColor(Color.parseColor(\"#000000\")))\r\n            }\r\n            else\r\n            {\r\n                mCorrectAnswers++\r\n            }\r\n\r\n            answerView(question.correctAnswer, R.drawable.correct_option_button_border_bg)\r\n\r\n            mSelectedOptionPosition = 0\r\n\r\n            Thread.sleep(3000)\r\n        }\r\n    }\r\n\r\n    // TODO: wyrzucic selectionOptionView?\r\n    // czy ja chce wgl te funkcje? chyba nie. Ew. IF WCISKACZ BUTTON 1 -> POROWNAJ ODPOWIEDZI -> ZAKOLORUJ GUZIK\r\n    private fun selectedOptionView(button: Button, selectedOptionNum: Int){\r\n\r\n        //defaultOptionView()     // chodzi tu o to, ze jak wcisniesz drugi guzik to masz zresetowac \"zaznaczenie\" pierwszego guzika, wiec out\r\n        mSelectedOptionPosition = selectedOptionNum\r\n\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/quizbattle/QuestionActivity.kt b/app/src/main/java/com/example/quizbattle/QuestionActivity.kt
--- a/app/src/main/java/com/example/quizbattle/QuestionActivity.kt	(revision b24200c1f682d2b63a919a70df7e1e3b913faae7)
+++ b/app/src/main/java/com/example/quizbattle/QuestionActivity.kt	(date 1682347481821)
@@ -121,12 +121,12 @@
             }
 
             R.id.answer3Button -> {
-                selectedOptionView(binding.answer2Button, 3)
+                selectedOptionView(binding.answer3Button, 3)
                 checkAnswer()
             }
 
             R.id.answer4Button -> {
-                selectedOptionView(binding.answer2Button, 4)
+                selectedOptionView(binding.answer4Button, 4)
                 checkAnswer()
             }
         }
@@ -137,12 +137,13 @@
 
         if (mSelectedOptionPosition == 0)
         {
-            mCurrentPosition ++
+            mCurrentPosition++
 
             when
             {
                 mCurrentPosition <= mQuestionsList!!.size ->
                 {
+                    Thread.sleep(3000)
                     setQuestion()
                 }
                 else -> {
@@ -168,7 +169,7 @@
 
             mSelectedOptionPosition = 0
 
-            Thread.sleep(3000)
+
         }
     }
 
@@ -176,8 +177,33 @@
     // czy ja chce wgl te funkcje? chyba nie. Ew. IF WCISKACZ BUTTON 1 -> POROWNAJ ODPOWIEDZI -> ZAKOLORUJ GUZIK
     private fun selectedOptionView(button: Button, selectedOptionNum: Int){
 
-        //defaultOptionView()     // chodzi tu o to, ze jak wcisniesz drugi guzik to masz zresetowac "zaznaczenie" pierwszego guzika, wiec out
+        defaultOptionView()     // chodzi tu o to, ze jak wcisniesz drugi guzik to masz zresetowac "zaznaczenie" pierwszego guzika, wiec out
+        mSelectedOptionPosition = selectedOptionNum
+
+
+
+
+
+        defaultOptionView()
         mSelectedOptionPosition = selectedOptionNum
+        val question = mQuestionsList?.get(mCurrentPosition - 1)
+
+        // check if this is the last question
+        if (mCurrentPosition == mQuestionsList!!.size) {
+            button.text = "Finish"
+        }
+        Handler().postDelayed({
+            // increment mCurrentPosition and set new question
+            mCurrentPosition++
+            if (mCurrentPosition <= mQuestionsList!!.size) {
+                setQuestion()
+            } else {
+                // when all questions have been answered
+                Toast.makeText(this, "You have successfully completed the Quiz", Toast.LENGTH_SHORT).show()
+            }
+        }, 1000) // wait for 1 second before setting the new question
+
+
 
 
     }
